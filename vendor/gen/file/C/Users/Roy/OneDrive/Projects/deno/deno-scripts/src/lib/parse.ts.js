import Picomatch from 'https://cdn.esm.sh/picomatch@2.2.2';
import Micromatch from 'https://cdn.esm.sh/micromatch@4.0.2';
import braces from 'https://cdn.esm.sh/braces@3.0.2';
const DQStringReS = '"[^"]*(?:"|$)';
const SQStringReS = "'[^']*(?:'|$)";
const DQStringStrictReS = '"[^"]*"';
const SQStringStrictReS = "'[^']*'";
const notQReS = `(?:(?!["']).)`;
const notQWSReS = `(?:(?!["']|\\s).)`;
export function splitByBareWS(s) {
    const addBalance = true;
    const arr = [];
    s.replace(/^\s+/, '');
    const tokenRe = new RegExp(`^((?:${DQStringReS}|${SQStringReS}|${notQWSReS}+)*)(.*$)`, 'msu');
    while (s) {
        const m = s.match(tokenRe);
        if (m) {
            arr.push(m[1]);
            s = m[2] ? m[2].replace(/^\s+/, '') : '';
        }
        else {
            s = '';
        }
    }
    return arr;
}
export function splitByBareWSBalanced(s) {
    const addBalance = true;
    const arr = [];
    s.replace(/^\s+/, '');
    const tokenRe = new RegExp(`^((?:${DQStringReS}|${SQStringReS}|${notQWSReS}+))(\\s+)?(.*$)`, 'msu');
    let text = '';
    while (s) {
        const m = s.match(tokenRe);
        if (m) {
            let matchStr = m[1];
            if (matchStr.length > 0) {
                if (matchStr[0] === '"') {
                    if (addBalance && matchStr[matchStr.length - 1] !== '"') {
                        matchStr += '"';
                    }
                }
                else if (matchStr[0] === "'") {
                    if (addBalance && matchStr[matchStr.length - 1] !== "'") {
                        matchStr += "'";
                    }
                }
            }
            text += matchStr;
            s = m[3] ? m[3].replace(/^\s+/, '') : '';
            if (m[2] || !s) {
                arr.push(text);
                text = '';
            }
        }
        else {
            arr.push(text);
            text = s = '';
        }
    }
    return arr;
}
export function splitByBareWSToPreBrace(s) {
    const arr = [];
    s.replace(/^\s+/, '');
    const tokenRe = new RegExp(`^((?:${DQStringReS}|${SQStringReS}|${notQWSReS}+))(\\s+)?(.*?$)`, '');
    let text = '';
    while (s) {
        const m = s.match(tokenRe);
        if (m) {
            let matchStr = m[1];
            if (matchStr.length > 0) {
                if (matchStr[0] === '"') {
                    const spl = matchStr.split('"');
                    matchStr = spl[1];
                    matchStr = matchStr.replace(/([\\?*\[\]])/gmsu, '\\$1');
                    matchStr = matchStr.replace(/(.)/gmsu, '\\$1');
                }
                else if (matchStr[0] === "'") {
                    const spl = matchStr.split("'");
                    matchStr = spl[1];
                    matchStr = matchStr.replace(/([?*\[\]])/gmsu, '\\$1');
                    matchStr = matchStr.replace(/(.)/gmsu, '\\$1');
                }
                else {
                    matchStr = matchStr.replace(/\\/gmsu, '\\\\');
                    matchStr = matchStr.replace(/([\\?*\[\]])/gmsu, '\\$1');
                }
            }
            text += matchStr;
            s = m[3] ? m[3].replace(/^\s+/, '') : '';
            if (m[2] || !s) {
                arr.push(text);
                text = '';
            }
        }
        else {
            arr.push(text);
            text = s = '';
        }
    }
    return arr;
}
export function braceExpand(s) {
    const arr = [];
    s.replace(/^\s+/, '');
    const tokenRe = new RegExp(`^((?:${DQStringReS}|${SQStringReS}|${notQReS}+))(.*?$)`, '');
    let text = '';
    while (s) {
        const m = s.match(tokenRe);
        if (m) {
            let matchStr = m[1];
            if (matchStr.length > 0) {
                if (matchStr[0] === '"') {
                    const spl = matchStr.split('"');
                    matchStr = spl[1];
                    matchStr = matchStr.replace(/([\\?*\[\]])/gmsu, '\\$1');
                    matchStr = matchStr.replace(/(.)/gmsu, '\\$1');
                }
                else if (matchStr[0] === "'") {
                    const spl = matchStr.split("'");
                    matchStr = spl[1];
                    matchStr = matchStr.replace(/([?*\[\]])/gmsu, '\\$1');
                    matchStr = matchStr.replace(/(.)/gmsu, '\\$1');
                }
                else {
                    matchStr = matchStr.replace(/\\/gmsu, '\\\\');
                    matchStr = matchStr.replace(/([\\?*\[\]])/gmsu, '\\$1');
                }
            }
            text += matchStr;
            s = m[2];
            if (!s) {
                arr.push(text);
                text = '';
            }
        }
        else {
            arr.push(text);
            text = s = '';
        }
    }
    return arr
        .flatMap((v) => braces.expand(v))
        .map((v) => v.replace(/\\(.)/gmsu, '"$1"'))
        .map((v) => v.replace(/"\\"/gmsu, '\\'));
}
const pathSepRe = /[\\/]/;
const globChars = ['?', '*', '[', ']'];
const globCharsReS = globChars.map((c) => '\\' + c).join('|');
export function parseNonGlobPathPrefix(s) {
    const options = {};
    let prefix = '';
    let glob = '';
    const sepReS = `[\\\\\\/]`;
    if (!options.os || options.os === 'windows') {
        const m = s.match(/^(\\\\\?\\)(.*)/);
        if (m) {
            prefix = m[1] ? m[1] : '';
            s = m[2] ? m[2] : '';
        }
    }
    const QReS = `["']`;
    const nonGlobReS = `(?:(?!${globCharsReS}).)`;
    const nonGlobQReS = `(?:(?!${globCharsReS}|${QReS}).)`;
    const nonGlobQSepReS = `(?:(?!${globCharsReS}|${QReS}|${sepReS}).)`;
    const re = new RegExp(`^((?:${DQStringReS}|${SQStringReS}|${nonGlobQSepReS}+)*(?:${sepReS}+|$))(.*$)`);
    while (s) {
        const m = s.match(re);
        if (m) {
            prefix += m && m[1] ? m[1] : '';
            glob = m && m[2];
            s = m && m[1] && m[2] ? m[2] : '';
        }
        else {
            glob = s || '';
            s = '';
        }
    }
    console.log({ glob });
    const globAsRe = glob && globToRe(glob);
    const globScan = Micromatch.scan(glob, { tokens: true });
    const globScanTokens = globScan.tokens[0];
    const globSegs = Picomatch.scan(glob, {});
    return {
        prefix,
        glob,
        globAsRe,
        globScan,
        globScanTokens,
        globSegs,
    };
}
function globToRe(glob) {
    return Micromatch.makeRe(glob);
}
//# sourceMappingURL=data:application/json;base64,