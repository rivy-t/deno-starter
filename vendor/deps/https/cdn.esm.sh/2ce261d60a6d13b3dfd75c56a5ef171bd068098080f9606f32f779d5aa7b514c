import __util$ from "/v38/util@0.12.3/deno/util.js";import __to_regex_range$ from "/v38/to-regex-range@5.0.1/deno/to-regex-range.js";var z=Object.create,w=Object.defineProperty,O=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty,k=Object.getOwnPropertyNames,B=Object.getOwnPropertyDescriptor;var D=e=>w(e,"__esModule",{value:!0});var F=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var G=(e,r,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of k(r))!T.call(e,i)&&i!=="default"&&w(e,i,{get:()=>r[i],enumerable:!(t=B(r,i))||t.enumerable});return e},H=e=>G(D(w(e!=null?z(O(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var I=F((_,v)=>{"use strict";var J=__util$,d=__to_regex_range$,M=e=>e!==null&&typeof e=="object"&&!Array.isArray(e),K=e=>r=>e===!0?Number(r):String(r),b=e=>typeof e=="number"||typeof e=="string"&&e!=="",o=e=>Number.isInteger(+e),R=e=>{let r=`${e}`,t=-1;if(r[0]==="-"&&(r=r.slice(1)),r==="0")return!1;for(;r[++t]==="0";);return t>0},L=(e,r,t)=>typeof e=="string"||typeof r=="string"?!0:t.stringify===!0,P=(e,r,t)=>{if(r>0){let i=e[0]==="-"?"-":"";i&&(e=e.slice(1)),e=i+e.padStart(i?r-1:r,"0")}return t===!1?String(e):e},N=(e,r)=>{let t=e[0]==="-"?"-":"";for(t&&(e=e.slice(1),r--);e.length<r;)e="0"+e;return t?"-"+e:e},Q=(e,r)=>{e.negatives.sort((f,u)=>f<u?-1:f>u?1:0),e.positives.sort((f,u)=>f<u?-1:f>u?1:0);let t=r.capture?"":"?:",i="",n="",l;return e.positives.length&&(i=e.positives.join("|")),e.negatives.length&&(n=`-(${t}${e.negatives.join("|")})`),i&&n?l=`${i}|${n}`:l=i||n,r.wrap?`(${t}${l})`:l},C=(e,r,t,i)=>{if(t)return d(e,r,{wrap:!1,...i});let n=String.fromCharCode(e);if(e===r)return n;let l=String.fromCharCode(r);return`[${n}-${l}]`},j=(e,r,t)=>{if(Array.isArray(e)){let i=t.wrap===!0,n=t.capture?"":"?:";return i?`(${n}${e.join("|")})`:e.join("|")}return d(e,r,t)},A=(...e)=>new RangeError("Invalid range arguments: "+J.inspect(...e)),E=(e,r,t)=>{if(t.strictRanges===!0)throw A([e,r]);return[]},U=(e,r)=>{if(r.strictRanges===!0)throw new TypeError(`Expected step "${e}" to be a number`);return[]},W=(e,r,t=1,i={})=>{let n=Number(e),l=Number(r);if(!Number.isInteger(n)||!Number.isInteger(l)){if(i.strictRanges===!0)throw A([e,r]);return[]}n===0&&(n=0),l===0&&(l=0);let f=n>l,u=String(e),s=String(r),c=String(t);t=Math.max(Math.abs(t),1);let g=R(u)||R(s)||R(c),a=g?Math.max(u.length,s.length,c.length):0,h=g===!1&&L(e,r,i)===!1,q=i.transform||K(h);if(i.toRegex&&t===1)return C(N(e,a),N(r,a),!0,i);let S={negatives:[],positives:[]},V=y=>S[y<0?"negatives":"positives"].push(Math.abs(y)),x=[],$=0;for(;f?n>=l:n<=l;)i.toRegex===!0&&t>1?V(n):x.push(P(q(n,$),a,h)),n=f?n-t:n+t,$++;return i.toRegex===!0?t>1?Q(S,i):j(x,null,{wrap:!1,...i}):x},X=(e,r,t=1,i={})=>{if(!o(e)&&e.length>1||!o(r)&&r.length>1)return E(e,r,i);let n=i.transform||(h=>String.fromCharCode(h)),l=`${e}`.charCodeAt(0),f=`${r}`.charCodeAt(0),u=l>f,s=Math.min(l,f),c=Math.max(l,f);if(i.toRegex&&t===1)return C(s,c,!1,i);let g=[],a=0;for(;u?l>=f:l<=f;)g.push(n(l,a)),l=u?l-t:l+t,a++;return i.toRegex===!0?j(g,null,{wrap:!1,options:i}):g},m=(e,r,t,i={})=>{if(r==null&&b(e))return[e];if(!b(e)||!b(r))return E(e,r,i);if(typeof t=="function")return m(e,r,1,{transform:t});if(M(t))return m(e,r,0,t);let n={...i};return n.capture===!0&&(n.wrap=!0),t=t||n.step||1,o(t)?o(e)&&o(r)?W(e,r,t,n):X(e,r,Math.max(Math.abs(t),1),n):t!=null&&!M(t)?U(t,n):m(e,r,1,t)};v.exports=m});var Y=H(I());var export_default=Y.default;export{export_default as default};/*!
* fill-range <https://github.com/jonschlinkert/fill-range>
*
* Copyright (c) 2014-present, Jon Schlinkert.
* Licensed under the MIT License.
*/